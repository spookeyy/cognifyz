<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Registration Form</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Custom styles with animations */
        .hero-section {
            background: linear-gradient(135deg, #6e8efb, #a777e3);
            color: white;
            padding: 4rem 0;
            margin-bottom: 3rem;
            position: relative;
            overflow: hidden;
        }
        
        .hero-section::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 70%);
            animation: pulse 15s infinite linear;
        }
        
        @keyframes pulse {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .registration-card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            overflow: hidden;
        }
        
        .registration-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.15);
        }
        
        .form-control:focus {
            border-color: #a777e3;
            box-shadow: 0 0 0 0.25rem rgba(167, 119, 227, 0.25);
        }
        
        .btn-primary {
            background-color: #6e8efb;
            border-color: #6e8efb;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background-color: #5a7df5;
            border-color: #5a7df5;
            transform: translateY(-2px);
        }
        
        .submission-item {
            transition: all 0.3s ease;
            border-left: 4px solid #6e8efb;
        }
        
        .submission-item:hover {
            transform: translateX(5px);
            border-left: 4px solid #a777e3;
        }
        
        .success-alert {
            animation: fadeIn 0.5s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .feature-icon {
            font-size: 2.5rem;
            color: #6e8efb;
            margin-bottom: 1rem;
            transition: transform 0.3s ease;
        }
        
        .feature-card:hover .feature-icon {
            transform: scale(1.1) rotate(5deg);
        }
    </style>
</head>
<body>
    <!-- Hero Section -->
    <section class="hero-section">
        <div class="container text-center">
            <h1 class="display-4 fw-bold mb-3">Welcome to Our Platform</h1>
            <p class="lead">Join thousands of satisfied users today</p>
        </div>
    </section>

    <!-- Main Content -->
    <div class="container mb-5">
        <div class="row">
            <!-- Features Section -->
            <div class="col-lg-4 mb-4">
                <div class="row">
                    <div class="col-md-6 col-lg-12 mb-4">
                        <div class="card feature-card h-100 p-4 text-center">
                            <i class="fas fa-shield-alt feature-icon"></i>
                            <h4>Secure</h4>
                            <p class="text-muted">Bank-level encryption keeps your data safe</p>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-12 mb-4">
                        <div class="card feature-card h-100 p-4 text-center">
                            <i class="fas fa-bolt feature-icon"></i>
                            <h4>Fast</h4>
                            <p class="text-muted">Lightning-fast performance for all users</p>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-12">
                        <div class="card feature-card h-100 p-4 text-center">
                            <i class="fas fa-headset feature-icon"></i>
                            <h4>Support</h4>
                            <p class="text-muted">24/7 customer support team ready to help</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Registration Form -->
            <div class="col-lg-8">
                <div class="card registration-card mb-4">
                    <div class="card-header bg-white">
                        <h3 class="mb-0">Create Your Account</h3>
                    </div>
                    <div class="card-body">
                        <% if (success) { %>
                            <div class="alert alert-success success-alert">
                                <i class="fas fa-check-circle me-2"></i> Registration successful! Welcome aboard.
                            </div>
                        <% } %>

                        <form action="/submit" method="POST" id="registrationForm">
                            <div class="mb-3">
                                <label for="name" class="form-label">Full Name</label>
                                <input 
                                    type="text" 
                                    class="form-control <%= errors && errors.name ? 'is-invalid' : '' %>" 
                                    id="name" 
                                    name="name" 
                                    value="<%= formData ? formData.name : '' %>"
                                    required
                                >
                                <% if (errors && errors.name) { %>
                                    <div class="invalid-feedback">
                                        <i class="fas fa-exclamation-circle me-1"></i> <%= errors.name %>
                                    </div>
                                <% } %>
                            </div>
                            
                            <div class="mb-3">
                                <label for="email" class="form-label">Email Address</label>
                                <input 
                                    type="email" 
                                    class="form-control <%= errors && errors.email ? 'is-invalid' : '' %>" 
                                    id="email" 
                                    name="email" 
                                    value="<%= formData ? formData.email : '' %>"
                                    required
                                >
                                <% if (errors && errors.email) { %>
                                    <div class="invalid-feedback">
                                        <i class="fas fa-exclamation-circle me-1"></i> <%= errors.email %>
                                    </div>
                                <% } %>
                            </div>
                            
                            <div class="mb-4">
                                <label for="password" class="form-label">Password</label>
                                <input 
                                    type="password" 
                                    class="form-control <%= errors && errors.password ? 'is-invalid' : '' %>" 
                                    id="password" 
                                    name="password" 
                                    required
                                >
                                <% if (errors && errors.password) { %>
                                    <div class="invalid-feedback">
                                        <i class="fas fa-exclamation-circle me-1"></i> <%= errors.password %>
                                    </div>
                                <% } %>
                                <small class="text-muted">At least 6 characters</small>
                            </div>
                            
                            <button type="submit" class="btn btn-primary w-100 py-2">
                                <i class="fas fa-user-plus me-2"></i> Register Now
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Recent Registrations -->
<% if (submissions && submissions.length > 0) { %>
    <div class="card">
        <div class="card-header bg-white">
            <h5 class="mb-0">Recent Registrations</h5>
        </div>
        <div class="card-body">
            <div class="list-group">
                <% submissions.slice().reverse().slice(0, 5).forEach(sub => { %>
                    <div class="list-group-item submission-item">
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1"><%= sub.name %></h6>
                            <small class="text-muted"><%= new Date(sub.createdAt).toLocaleDateString() %></small>
                        </div>
                        <small class="text-muted"><%= sub.email %></small>
                        <div class="mt-2">
                            <button class="btn btn-sm btn-outline-primary edit-btn" data-id="<%= sub.id %>">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-outline-danger delete-btn" data-id="<%= sub.id %>">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>
<% } %>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- <script src="../api/main.js"></script> -->
     <script>const registrationForm = document.getElementById("registrationForm");
const submissionsList = document.querySelector(".list-group");
const apiStatus = document.createElement("div");
apiStatus.className = "alert alert-info mb-3";
document.querySelector(".card-body").prepend(apiStatus);

const API_BASE_URL = "http://localhost:3000/api";

async function fetchSubmissions() {
  try {
    apiStatus.innerHTML =
      '<i class="fas fa-sync-alt fa-spin me-2"></i> Loading submissions...';
    const response = await fetch(`${API_BASE_URL}/submissions`);
    if (!response.ok) throw new Error("Failed to fetch submissions");

    const submissions = await response.json();
    renderSubmissions(submissions);
    apiStatus.innerHTML = `<i class="fas fa-check-circle me-2"></i> Loaded ${submissions.length} submissions`;
    setTimeout(() => apiStatus.classList.add("fade-out"), 3000);
  } catch (error) {
    console.error("Error:", error);
    apiStatus.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i> ${error.message}`;
    apiStatus.className = "alert alert-danger mb-3";
  }
}

function renderSubmissions(submissions) {
  submissionsList.innerHTML = "";
  submissions
    .slice()
    .reverse()
    .slice(0, 5)
    .forEach((sub) => {
      const submissionItem = document.createElement("div");
      submissionItem.className = "list-group-item submission-item";
      submissionItem.innerHTML = `
            <div class="d-flex w-100 justify-content-between">
                <h6 class="mb-1">${sub.name}</h6>
                <small class="text-muted">${new Date(
                  sub.createdAt
                ).toLocaleDateString()}</small>
            </div>
            <small class="text-muted">${sub.email}</small>
            <div class="mt-2">
                <button class="btn btn-sm btn-outline-primary edit-btn" data-id="${
                  sub.id
                }">
                    <i class="fas fa-edit"></i> Edit
                </button>
                <button class="btn btn-sm btn-outline-danger delete-btn" data-id="${
                  sub.id
                }">
                    <i class="fas fa-trash"></i> Delete
                </button>
            </div>
        `;
      submissionsList.appendChild(submissionItem);
    });

  document.querySelectorAll(".edit-btn").forEach((btn) => {
    btn.addEventListener("click", handleEdit);
  });
  document.querySelectorAll(".delete-btn").forEach((btn) => {
    btn.addEventListener("click", handleDelete);
  });
}

async function handleFormSubmit(e) {
  e.preventDefault();

  const formData = {
    name: document.getElementById("name").value,
    email: document.getElementById("email").value,
    password: document.getElementById("password").value,
  };

  const errors = {};
  if (formData.name.length < 2)
    errors.name = "Name must be at least 2 characters";
  if (!/^\S+@\S+\.\S+$/.test(formData.email))
    errors.email = "Please enter a valid email";
  if (formData.password.length < 6)
    errors.password = "Password must be at least 6 characters";

  if (Object.keys(errors).length > 0) {
    Object.entries(errors).forEach(([field, message]) => {
      const input = document.getElementById(field);
      input.classList.add("is-invalid");
      const feedback = input.nextElementSibling;
      if (feedback && feedback.classList.contains("invalid-feedback")) {
        feedback.innerHTML = `<i class="fas fa-exclamation-circle me-1"></i> ${message}`;
      }
    });
    return;
  }

  try {
    const mode = registrationForm.dataset.mode || "create";
    const id = registrationForm.dataset.id || "";
    const url =
      mode === "update"
        ? `${API_BASE_URL}/submissions/${id}`
        : `${API_BASE_URL}/submissions`;
    const method = mode === "update" ? "PUT" : "POST";

    const response = await fetch(url, {
      method,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(formData),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.errors || "Failed to submit form");
    }

    const successAlert = document.createElement("div");
    successAlert.className = "alert alert-success success-alert";
    successAlert.innerHTML = `<i class="fas fa-check-circle me-2"></i> ${
      mode === "update" ? "Updated" : "Registration"
    } successful!`;
    registrationForm.prepend(successAlert);

    registrationForm.reset();
    registrationForm.dataset.mode = "create";
    registrationForm.dataset.id = "";
    registrationForm.querySelector('button[type="submit"]').innerHTML =
      '<i class="fas fa-user-plus me-2"></i> Register Now';

    await fetchSubmissions();

    setTimeout(() => {
      successAlert.classList.add("fade-out");
      setTimeout(() => successAlert.remove(), 500);
    }, 5000);
  } catch (error) {
    console.error("Error:", error);
    apiStatus.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i> ${error.message}`;
    apiStatus.className = "alert alert-danger mb-3";
  }
}

async function handleEdit(e) {
  const id = e.target.closest(".edit-btn").dataset.id;
  try {
    const response = await fetch(`${API_BASE_URL}/submissions/${id}`);
    if (!response.ok) throw new Error("Failed to fetch submission");

    const submission = await response.json();

    document.getElementById("name").value = submission.name;
    document.getElementById("email").value = submission.email;
    document.getElementById("password").value = "";

    registrationForm.dataset.mode = "update";
    registrationForm.dataset.id = id;

    const submitBtn = registrationForm.querySelector('button[type="submit"]');
    submitBtn.innerHTML = '<i class="fas fa-save me-2"></i> Update Submission';

    registrationForm.scrollIntoView({ behavior: "smooth" });
  } catch (error) {
    console.error("Error:", error);
    apiStatus.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i> ${error.message}`;
    apiStatus.className = "alert alert-danger mb-3";
  }
}

async function handleDelete(e) {
  if (!confirm("Are you sure you want to delete this submission?")) return;

  const id = e.target.closest(".delete-btn").dataset.id;
  try {
    const response = await fetch(`${API_BASE_URL}/submissions/${id}`, {
      method: "DELETE",
    });

    if (!response.ok) throw new Error("Failed to delete submission");

    await fetchSubmissions();

    apiStatus.innerHTML = `<i class="fas fa-check-circle me-2"></i> Submission deleted successfully`;
    apiStatus.className = "alert alert-success mb-3";
    setTimeout(() => apiStatus.classList.add("fade-out"), 3000);
  } catch (error) {
    console.error("Error:", error);
    apiStatus.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i> ${error.message}`;
    apiStatus.className = "alert alert-danger mb-3";
  }
}

document.addEventListener("DOMContentLoaded", () => {
  registrationForm.addEventListener("submit", handleFormSubmit);

  document.querySelectorAll(".form-control").forEach((input) => {
    input.addEventListener("input", function () {
      this.classList.remove("is-invalid");
    });
  });

  fetchSubmissions();
});

const style = document.createElement("style");
style.textContent = `
    .fade-out {
        opacity: 0;
        transition: opacity 0.5s ease-out;
    }
`;
document.head.appendChild(style);
</script>
</body>
</html>